// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  bio       String?
  image     Bytes?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // relations
  articles  Article[]
  comments  Comment[]
  followers UserFollowing[] @relation("followers")
  following UserFollowing[] @relation("following")

  @@map("users")
}

model Article {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  description String
  body        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  //relations
  authorId Int
  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]

  @@map("articles")
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  //relations
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
  articleId Int
  article   Article @relation(fields: [articleId], references: [id])

  @@map("comments")
}

model UserFollowing {
  userId     Int
  followerId Int

  // relations
  user     User @relation(fields: [userId], references: [id], name: "following")
  follower User @relation(fields: [followerId], references: [id], name: "followers")

  @@id([userId, followerId])
  @@map("user_following")
}
