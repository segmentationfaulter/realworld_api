// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  bio       String?
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // relations
  articles         Article[]
  comments         Comment[]
  favoriteArticles Favorite[]
  followers        UserFollower[] @relation("being_followed")
  following        UserFollower[] @relation("follower")

  @@map("users")
}

model Article {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  description String
  body        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  authorId    Int      @map("author_id")

  //relations
  author      User       @relation(fields: [authorId], references: [id])
  comments    Comment[]
  favoritedBy Favorite[]
  tags        Tag[]

  @@map("articles")
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  authorId  Int      @map("author_id")
  articleId Int      @map("article_id")

  //relations
  author  User    @relation(fields: [authorId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@map("comments")
}

model UserFollower {
  userId     Int @map("user_id")
  followerId Int @map("follower_id")

  // relations
  user     User @relation(fields: [userId], references: [id], name: "being_followed")
  follower User @relation(fields: [followerId], references: [id], name: "follower")

  @@id([userId, followerId])
  @@map("user_followers")
}

model Favorite {
  articleId Int @map("article_id")
  userId    Int @map("user_id")

  // relations
  article Article @relation(fields: [articleId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([userId, articleId])
  @@map("favorites")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  // relations
  articles Article[]

  @@map("tags")
}
